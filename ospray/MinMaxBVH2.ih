// ======================================================================== //
// Copyright 2009-2014 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

// ospray
#include "math/vec.ih"
#include "math/box.ih"
#include "common/Ray.ih"
#include "geometry/Geometry.ih"
#include "common/Model.ih"


/*! BVH node for a MinMaxBVH2 */
struct MinMaxBVH2Node {
  vec3f bounds_lo;
  float range_lo;
  vec3f bounds_hi; // spatial bounds
  float range_hi; // attribute range
  int64 childRef;
};

/*! the base abstraction for a min/max BVH, not yet saying whether
  it's for volumes or isosurfaces, let alone for which type of
  primitive */
struct MinMaxBVH2 {
  int64           rootRef;
  const uint32   *primID;
  MinMaxBVH2Node *node;
};

// inline bool pointInAABBTest( const uniform MinMaxBVH2Node &box, const vec3f &point)
// {
//   return 
//     point.x >= box.bounds_lo.x &
//     point.y >= box.bounds_lo.y &
//     point.z >= box.bounds_lo.z &
//     point.x <= box.bounds_hi.x &
//     point.y <= box.bounds_hi.y &
//     point.z <= box.bounds_hi.z;
// }


/*! \brief Fct pointer type for 'virtual' method that sets a pixel */
typedef bool (*MinMaxBVH_intersectPrim)(void *uniform geomPtr,
                                        uniform int primID,
                                        varying Ray &ray);

void MinMaxBVH2_intersect_packet(uniform MinMaxBVH2 *uniform bvh2,
                          void *uniform geomPtr,
                          TransferFunction *uniform,
                          uniform MinMaxBVH_intersectPrim intersectPrim,
                          uniform int numPrims,
                          varying Ray &ray);

void MinMaxBVH2_occluded_packet(uniform MinMaxBVH2 *uniform bvh2,
                         void *uniform geomPtr,
                         TransferFunction *uniform,
                         uniform MinMaxBVH_intersectPrim occludedPrim,
                         uniform int numPrims,
                         varying Ray &ray);

void MinMaxBVH2_intersect_naive(uniform MinMaxBVH2 *uniform bvh2,
                          void *uniform geomPtr,
                          TransferFunction *uniform,
                          uniform MinMaxBVH_intersectPrim intersectPrim,
                          uniform int numPrims,
                          varying Ray &ray);

void MinMaxBVH2_occluded_naive(uniform MinMaxBVH2 *uniform bvh2,
                         void *uniform geomPtr,
                         TransferFunction *uniform,
                         uniform MinMaxBVH_intersectPrim occludedPrim,
                         uniform int numPrims,
                         varying Ray &ray);



